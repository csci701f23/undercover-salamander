import numpy as np
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import ffmpeg  # Import the ffmpeg-python library

# Load the data (replace with your file path)
df = pd.read_csv('/Users/ceceziegler/Downloads/daily_rainfall_flags_removed.csv', parse_dates=['date'])

# Load the GeoDataFrame (replace with your file path)
gdf = gpd.read_file("/Users/ceceziegler/Downloads/gz_2010_us_040_00_500k.json")

# Define your custom vmin and vmax values
vmin = 0  # Minimum value for the color scale
vmax = 50  # Maximum value for the color scale

# Define the range of years for the animation
start_year = 2010
end_year = 2020
years = range(start_year, end_year + 1)

# Create a function to plot the choropleth for a given year
def plot_choropleth_for_year(year):
    # Filter the data for the current year
    df_year = df[df['date'].dt.year == year]

    # Group and sum the rainfall data for the current year
    grouped = df_year.groupby(['state_code', 'date'])['rainfall'].sum().reset_index()

    # Convert 'state_code' to an object type in the grouped DataFrame
    grouped['state_code'] = grouped['state_code'].astype(str)

    # Merge the GeoDataFrame with the grouped data
    merged = gdf.merge(grouped, left_on='STATE', right_on='state_code', how='left')

    # Create a figure with lower resolution
    fig, ax = plt.subplots(1, figsize=(8, 5), dpi=100)

    # Plot the GeoDataFrame with custom color scale
    merged.plot(column='rainfall', cmap='viridis', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True, vmin=vmin, vmax=vmax)

    # Customize the plot
    ax.set_title(f'Rainfall Choropleth Map for {year}', fontsize=16)
    ax.set_axis_off()  # Turn off the axis

# Create a function for the animation
def animate(years):
    fig, ax = plt.subplots(1, figsize=(8, 5), dpi=100)
    plt.close()  # Close the initial plot

    def update(frame):
        ax.clear()
        plot_choropleth_for_year(years[frame])

    ani = animation.FuncAnimation(fig, update, frames=len(years), repeat=False)

    # Specify the FFmpeg writer with codec options
    writer = animation.FFMpegWriter(fps=10, codec='libx264')
    ani.save('rainfall_animation.mp4', writer=writer)

# Call the animate function to create and save the animation
animate(years)